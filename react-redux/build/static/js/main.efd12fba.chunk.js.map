{"version":3,"sources":["components/AddNumber.jsx","containers/AddNumber.jsx","components/AddNumberRoot.jsx","components/DiplayNumber.jsx","containers/DiplayNumber.jsx","components/DiplayNumberRoot.jsx","App.js","serviceWorker.js","store.js","index.js"],"names":["AddNumber","state","size","onClick","props","type","value","this","onChange","e","setState","Number","target","Component","connect","dispatch","_size","AddNumberRoot","DiplayNumber","number","readOnly","DiplayNumberRoot","App","className","Boolean","window","location","hostname","match","createStore","action","undefined","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAEqBA,G,iNACpBC,MAAQ,CAACC,KAAK,G,wEACJ,IAAD,OACR,OACC,6BACC,0CACA,4BAAQC,QAAS,WAChB,EAAKC,MAAMD,QAAQ,EAAKF,MAAMC,QAD/B,KAGA,2BAAOG,KAAK,OAAOC,MAAOC,KAAKN,MAAMC,KAAMM,SAAU,SAAAC,GACpD,EAAKC,SAAS,CAACR,KAAKS,OAAOF,EAAEG,OAAON,iB,GAVFO,c,OCYxBC,kBAAQ,MAXvB,SAAiCC,GAChC,MAAO,CACNZ,QAAS,SAAAa,GACRD,EAAS,CACRV,KAAM,YACNH,KAAMc,QAMKF,CAAuCd,GCXjCiB,E,iLAEnB,OACC,6BACC,+CACA,kBAAC,EAAD,W,GALuCJ,aCFtBK,E,iLAEnB,OACC,6BACC,6CACA,2BAAOb,KAAK,OAAOC,MAAOC,KAAKH,MAAMe,OAAQC,UAAQ,S,GALfP,aCQ3BC,mBANf,SAA8Bb,GAC7B,MAAO,CACNkB,OAAQlB,EAAMkB,UAI4B,KAA7BL,CAAmCI,GCN7BG,E,iLAEnB,OACC,6BACC,kDACA,kBAAC,EAAD,W,GAL0CR,aCiB/BS,E,2MAbbrB,MAAQ,CAACkB,OAAO,G,wEAEd,OACE,yBAAKI,UAAU,OACb,oCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAkBJ,OAAQZ,KAAKN,MAAMkB,c,GAP3BN,aCMEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBChBSC,eAAY,SAAC5B,EAAO6B,GAClC,YAAaC,IAAV9B,EACK,CAACkB,OAAO,GAEI,cAAhBW,EAAOzB,KACH,eAAIJ,EAAX,CAAkBkB,OAAOlB,EAAMkB,OAASW,EAAO5B,OAEzCD,IACLwB,OAAOO,8BAAgCP,OAAOO,gCCFjDC,IAASC,OACR,kBAAC,IAAD,CAAUC,MAAOA,GAChB,kBAAC,EAAD,OAEAC,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.efd12fba.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class AddNumber extends Component {\n\tstate = {size:1}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Add Number</h1>\n\t\t\t\t<button onClick={()=>{\n\t\t\t\t\tthis.props.onClick(this.state.size)\n\t\t\t\t}} >+</button>\n\t\t\t\t<input type=\"text\" value={this.state.size} onChange={e=>{\n\t\t\t\t\tthis.setState({size:Number(e.target.value)})\n\t\t\t\t}} />\n\t\t\t</div>\n\t\t);\n\t}\n}","import AddNumber from \"../components/AddNumber\";\nimport { connect } from 'react-redux'\n\nfunction mapReduxDispatchToProps(dispatch) {\n\treturn {\n\t\tonClick: _size => {\n\t\t\tdispatch({\n\t\t\t\ttype: 'INCREMENT',\n\t\t\t\tsize: _size\n\t\t\t})\n\t\t}\n\t}\n}\n\nexport default connect(null, mapReduxDispatchToProps)(AddNumber)\n\n/* import React, { Component } from \"react\";\nimport store from '../store';\nexport default class extends Component{\n\trender(){\n\t\treturn <AddNumber onClick={_size => {\n\t\t\tstore.dispatch({\n\t\t\t\ttype: 'INCREMENT',\n\t\t\t\tsize: _size\n\t\t\t})\n\t\t}} />\n\t}\n} */","import React, { Component } from 'react';\nimport AddNumber from '../containers/AddNumber';\n\nexport default class AddNumberRoot extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Add Number Root</h1>\n\t\t\t\t<AddNumber />\n\t\t\t</div>\n\t\t)\n\t}\n}","import React, { Component } from 'react';\nexport default class DiplayNumber extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Diplay Number</h1>\n\t\t\t\t<input type=\"text\" value={this.props.number} readOnly />\n\t\t\t</div>\n\t\t);\n\t}\n}","import DiplayNumber from \"../components/DiplayNumber\";\nimport { connect } from 'react-redux'\n\nfunction mapReduxStateToProps(state) {\n\treturn {\n\t\tnumber: state.number\n\t}\n}\n\nexport default connect(mapReduxStateToProps,null)(DiplayNumber)\n\n\n\n/* import React, { Component } from \"react\";\nimport store from '../store';\nexport default class extends Component {\n\tstate = { number: store.getState().number }\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tstore.subscribe(() => {\n\t\t\tthis.setState({\n\t\t\t\tnumber: store.getState().number\n\t\t\t})\n\t\t})\n\t}\n\trender() {\n\t\treturn <DiplayNumber number={this.state.number} />\n\t}\n} */","import React, { Component } from 'react';\nimport DiplayNumber from '../containers/DiplayNumber';\n\nexport default class DiplayNumberRoot extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>Diplay Number Root</h1>\n\t\t\t\t<DiplayNumber/>\n\t\t\t</div>\n\t\t)\n\t}\n}","import React, { Component } from 'react';\nimport './App.css';\nimport AddNumberRoot from './components/AddNumberRoot';\nimport DiplayNumberRoot from './components/DiplayNumberRoot';\n\n\nclass App extends Component {\n  state = {number:0}\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Root</h1>\n        <AddNumberRoot />\n        <DiplayNumberRoot number={this.state.number} />\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from 'redux';\n\nexport default createStore((state, action)=>{\n\tif(state === undefined){\n\t\treturn {number:0}\n\t}\n\tif (action.type === 'INCREMENT'){\n\t\treturn {...state, number:state.number + action.size}\n\t}\n\treturn state;\n}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}