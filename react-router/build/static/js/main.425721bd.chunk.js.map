{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Home","contents","id","title","desc","Topic","params","useParams","selected_topic","cont","Number","topic_id","Topics","lis","map","key","to","path","Contact","ReactDOM","render","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCXN,SAASC,IACL,OACI,6BACI,oCACA,wCAKZ,IAAMC,EAAW,CACb,CAACC,GAAG,EAAGC,MAAM,OAAQC,KAAK,eAC1B,CAACF,GAAG,EAAGC,MAAM,MAAOC,KAAK,cACzB,CAACF,GAAG,EAAGC,MAAM,KAAMC,KAAK,cAG5B,SAASC,IACL,IAAMC,EAASC,cACXC,EAAiB,CACjBL,MAAO,QACPC,KAAM,aAJE,uBAMZ,YAAmBH,EAAnB,+CAA4B,CAAC,IAAlBQ,EAAiB,QACxB,GAAIA,EAAKP,KAAOQ,OAAOJ,EAAOK,UAAW,CACrCH,EAAiB,CACbL,MAAOM,EAAKN,MACZC,KAAMK,EAAKL,MAEf,QAZI,kFAeZ,OACI,6BACI,4BAAKI,EAAeL,OACpB,2BAAIK,EAAeJ,OAK/B,SAASQ,IACL,IAAMC,EAAMZ,EAASa,KAAI,SAAAL,GAAI,OACzB,wBAAIM,IAAKN,EAAKP,IAAI,kBAAC,IAAD,CAASc,GAAI,WAAaP,EAAKP,IAAKO,EAAKN,WAE/D,OACI,6BACI,sCACA,4BACIU,GAEJ,kBAAC,IAAD,CAAOI,KAAK,qBACR,kBAACZ,EAAD,QAiBhB,SAASa,IACL,OACI,6BACI,uCACA,2CA2BZC,IAASC,OAAO,kBAAC,IAAD,KAAe,mBAtB/B,WACI,OACI,6BACI,sDACA,4BAII,4BAAI,kBAAC,IAAD,CAASC,OAAK,EAACL,GAAG,KAAlB,SACJ,4BAAI,kBAAC,IAAD,CAASK,OAAK,EAACL,GAAG,WAAlB,WACJ,4BAAI,kBAAC,IAAD,CAASK,OAAK,EAACL,GAAG,YAAlB,aAER,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOK,OAAK,EAACJ,KAAK,KAAI,kBAACjB,EAAD,OACtB,kBAAC,IAAD,CAAOiB,KAAK,WAAU,kBAACL,EAAD,OACtB,kBAAC,IAAD,CAAOK,KAAK,YAAW,kBAACC,EAAD,OACvB,kBAAC,IAAD,CAAOD,KAAK,KAAZ,iBAMe,OAAyBK,SAASC,eAAe,SD2B1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.425721bd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route, Switch, Link, NavLink, useParams } from \"react-router-dom\";\n\nfunction Home(){\n    return(\n        <div>\n            <h2>Home</h2>\n            <p>Home ...</p>\n        </div>\n    )\n}\n\nconst contents = [\n    {id:1, title:'HTML', desc:'HTML is ...'},\n    {id:2, title:'CSS', desc:'CSS is ...'},\n    {id:3, title:'JS', desc:'JS is ...'}\n]\n\nfunction Topic(){\n    const params = useParams();\n    let selected_topic = {\n        title: 'Sorry',\n        desc: 'Not Found'\n    };\n    for (const cont of contents){\n        if (cont.id === Number(params.topic_id)) {\n            selected_topic = {\n                title: cont.title,\n                desc: cont.desc\n            };\n            break;\n        }\n    }\n    return(\n        <div>\n            <h3>{selected_topic.title}</h3>\n            <p>{selected_topic.desc}</p>\n        </div>\n    )\n}\n\nfunction Topics(){\n    const lis = contents.map(cont =>\n        <li key={cont.id}><NavLink to={\"/topics/\" + cont.id}>{cont.title}</NavLink></li>\n    );\n    return(\n        <div>\n            <h2>Topics</h2>\n            <ul>\n               {lis}\n            </ul>\n            <Route path=\"/topics/:topic_id\">\n                <Topic />\n            </Route>\n            {/* <Switch>\n                <Route path=\"/topics/1\">\n                    <p>HTML is ...</p>\n                </Route>\n                <Route path=\"/topics/2\">\n                    <p>CSS is ...</p>\n                </Route>\n                <Route path=\"/topics/3\">\n                    <p>JS is ...</p>\n                </Route>\n            </Switch> */}\n        </div>\n    )\n}\n\nfunction Contact(){\n    return(\n        <div>\n            <h2>Contact</h2>\n            <p>Contact ...</p>\n        </div>\n    )\n}\n\nfunction App(){\n    return(\n        <div>\n            <h1>Hello React Router DOM</h1>\n            <ul>\n                {/* <li><Link to=\"/\">Home</Link></li>\n                <li><Link to=\"/topics\">Topics</Link></li>\n                <li><Link to=\"/contact\">Contact</Link></li> */}\n                <li><NavLink exact to=\"/\">Home</NavLink></li>\n                <li><NavLink exact to=\"/topics\">Topics</NavLink></li>\n                <li><NavLink exact to=\"/contact\">Contact</NavLink></li>\n            </ul>\n            <Switch>\n                <Route exact path=\"/\"><Home /></Route>\n                <Route path=\"/topics\"><Topics /></Route>\n                <Route path=\"/contact\"><Contact /></Route>\n                <Route path=\"/\">Not found</Route>\n            </Switch>\n        </div>\n    )\n}\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}