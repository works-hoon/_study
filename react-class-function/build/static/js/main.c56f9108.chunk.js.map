{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["funcId","FuncComp","props","numberState","useState","initNumber","number","setNumber","Date","toString","_date","setDate","useEffect","console","log","document","title","className","type","onClick","Math","random","classId","ClassComp","state","date","nextProps","nextState","this","setState","Component","App","funcShow","setFuncShow","classShow","setClassShow","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mPAsBA,IACIA,EAAS,EACb,SAASC,EAASC,GAChB,IAAMC,EAAcC,mBAASF,EAAMG,YAC7BC,EAASH,EAAY,GACrBI,EAAYJ,EAAY,GAHP,EAIEC,oBAAU,IAAII,MAAQC,YAJxB,mBAIhBC,EAJgB,KAITC,EAJS,KAuBvB,OAjBAC,qBAAU,WAER,OADAC,QAAQC,IAAI,6CAA+Cd,EAT7C,gBAUP,WACLa,QAAQC,IAAI,wDAA0Dd,EAX1D,mBAab,IAEHY,qBAAU,WAIR,OAHAC,QAAQC,IAAI,kEAAoEd,EAhBlE,gBAkBde,SAASC,MAAQV,EACV,WACLO,QAAQC,IAAI,iCAAmCd,EApBnC,mBAsBb,CAACM,IAEJO,QAAQC,IAAI,uBAAyBd,EAxBrB,gBA0Bd,yBAAKiB,UAAU,aACb,wDACA,sCAAYX,GACZ,oCAAUI,GACV,4BAAQQ,KAAK,SAASC,QAAS,WAC7BZ,EAAUa,KAAKC,YADjB,UAGA,4BAAQH,KAAK,SAASC,QAAS,WAC7BR,GAAS,IAAIH,MAAQC,cADvB,SAON,IACIa,EAAU,EACRC,E,2MACJC,MAAQ,CACNlB,OAAQ,EAAKJ,MAAMG,WACnBoB,MAAO,IAAIjB,MAAQC,Y,2FAGnBI,QAAQC,IAAI,oCAAsCQ,EARnC,e,0CAWfT,QAAQC,IAAI,mCAAqCQ,EAXlC,e,4CAaKI,EAAWC,GAE/B,OADAd,QAAQC,IAAI,uCAAyCQ,EAdtC,cAeR,I,iDAEkBI,EAAWC,GACpCd,QAAQC,IAAI,qCAAuCQ,EAlBpC,e,yCAoBEI,EAAWC,GAC5Bd,QAAQC,IAAI,oCAAsCQ,EArBnC,e,6CAwBfT,QAAQC,IAAI,sCAAwCQ,EAxBrC,e,+BA0BP,IAAD,OAEP,OADAT,QAAQC,IAAI,wBAA0BQ,EA3BvB,aA6Bb,6BACE,yBAAKL,UAAU,aACb,qDACA,sCAAYW,KAAKJ,MAAMlB,QACvB,oCAAUsB,KAAKJ,MAAMC,MACrB,4BAAQP,KAAK,SAASC,QAAS,WAC7B,EAAKU,SAAS,CACZvB,OAAQc,KAAKC,aAFjB,UAKA,4BAAQH,KAAK,SAASC,QAAS,WAC7B,EAAKU,SAAS,CACZJ,MAAO,IAAIjB,MAAQC,eAFvB,c,GArCcqB,aAgDTC,EA5Gf,WAAgB,IAAD,EACmB3B,oBAAS,GAD5B,mBACN4B,EADM,KACIC,EADJ,OAEqB7B,oBAAS,GAF9B,mBAEN8B,EAFM,KAEKC,EAFL,KAGb,OACE,yBAAKlB,UAAU,aACb,4CACA,4BAAQE,QAAS,WACfc,GAAY,KADd,mBAGA,4BAAQd,QAAS,WACfgB,GAAa,KADf,gBAGCH,EAAW,kBAAC/B,EAAD,CAAUI,WAAY,IAAQ,KACzC6B,EAAY,kBAAC,EAAD,CAAW7B,WAAY,IAAQ,OCL9B+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAAS4B,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.c56f9108.chunk.js","sourcesContent":["import React, { Component, useState, useEffect} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [funcShow, setFuncShow] = useState(true);\n  const [classShow, setClassShow] = useState(true);\n  return (\n    <div className=\"container\">\n      <h1>Hello world!</h1>\n      <button onClick={()=>{\n        setFuncShow(false);\n      }}>remove function</button>\n      <button onClick={() => {\n        setClassShow(false);\n      }}>remove class</button>\n      {funcShow ? <FuncComp initNumber={2} /> : null}\n      {classShow ? <ClassComp initNumber={2} /> : null}\n    </div>\n  );\n}\n\nconst funcStyle = 'color:yellow';\nlet funcId = 0;\nfunction FuncComp(props) {\n  const numberState = useState(props.initNumber);\n  const number = numberState[0]; //상태값\n  const setNumber = numberState[1]; //상태를 바꾸는 함수\n  const [_date, setDate] = useState((new Date()).toString());\n  \n  useEffect(()=>{\n    console.log('%cfunc => useEffect(componentDidMount) ' + (++funcId), funcStyle);\n    return ()=>{\n      console.log('%cfunc => useEffect return (componentWillUnMount) ' + (++funcId), funcStyle);\n    }\n  }, []);\n\n  useEffect(() => {\n    console.log('%cfunc => useEffect(componentDidMount & componentDidUpdate) ' + (++funcId), funcStyle);\n    // document.title = number + ':' + _date;\n    document.title = number;\n    return () => {\n      console.log('%cfunc => useEffect return ' + (++funcId), funcStyle);\n    }\n  }, [number]);\n\n  console.log('%cfunc => render ' + (++funcId), funcStyle);\n  return (\n    <div className=\"container\">\n      <h2>function style component</h2>\n      <p>Number: {number}</p>\n      <p>Date: {_date}</p>\n      <button type=\"button\" onClick={() => {\n        setNumber(Math.random())\n      }}>random</button>\n      <button type=\"button\" onClick={() => {\n        setDate((new Date()).toString())\n      }}>date</button>\n    </div>\n  )\n}\n\nconst classStyle = 'color:red';\nlet classId = 0;\nclass ClassComp extends Component {\n  state = {\n    number: this.props.initNumber,\n    date: (new Date()).toString()\n  }\n  UNSAFE_componentWillMount(){\n    console.log('%cclass => componentWillMount ' + (++classId), classStyle);\n  }\n  componentDidMount(){\n    console.log('%cclass => componentDidMount ' + (++classId), classStyle);\n  }\n  shouldComponentUpdate(nextProps, nextState){\n    console.log('%cclass => shouldComponentUpdate ' + (++classId), classStyle);\n    return true;\n  }\n  UNSAFE_componentWillUpdate(nextProps, nextState) {\n    console.log('%cclass => componentWillUpdate ' + (++classId), classStyle);\n  }\n  componentDidUpdate(nextProps, nextState) {\n    console.log('%cclass => componentDidUpdate ' + (++classId), classStyle);\n  }\n  componentWillUnmount() {\n    console.log('%cclass => componentWillUnmount ' + (++classId), classStyle);\n  }\n  render() {\n    console.log('%cclass => render ' + (++classId), classStyle);\n    return (\n      <div>\n        <div className=\"container\">\n          <h2>class style component</h2>\n          <p>Number: {this.state.number}</p>\n          <p>Date: {this.state.date}</p>\n          <button type=\"button\" onClick={() => {\n            this.setState({\n              number: Math.random()\n            })\n          }}>random</button>\n          <button type=\"button\" onClick={() => {\n            this.setState({\n              date: (new Date()).toString()\n            })\n          }}>date</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}