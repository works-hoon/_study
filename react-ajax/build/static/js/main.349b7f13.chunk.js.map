{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Nav","listTag","i","this","props","list","li","push","key","id","href","title","data-id","onClick","e","preventDefault","target","dataset","Component","Article","desc","NowLoading","App","state","article","item","isLoading","items","newList","Object","assign","setState","fetch","then","result","json","NavTag","newArticle","ArticleTag","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0NAIMA,E,iLACK,IAAD,OACJC,EAAU,GACd,IAAK,IAAMC,KAAKC,KAAKC,MAAMC,KAAM,CAChC,IAAMC,EAAKH,KAAKC,MAAMC,KAAKH,GAC3BD,EAAQM,KACP,wBAAIC,IAAKF,EAAGG,IACX,uBAAGC,KAAM,IAAMJ,EAAGK,MAAOC,UAASN,EAAGG,GAAII,QAAS,SAAAC,GACjDA,EAAEC,iBACF,EAAKX,MAAMS,QAAQC,EAAEE,OAAOC,QAAQR,MAEnCH,EAAGK,SAKR,OACC,6BACC,4BACEV,Q,GAnBYiB,aA0BZC,E,iLAEJ,OACC,iCACC,4BAAKhB,KAAKC,MAAMO,OAChB,2BAAIR,KAAKC,MAAMgB,W,GALGF,aAWhBG,E,iLAEJ,OACC,qD,GAHsBH,aAuFVI,E,2MA9EdC,MAAQ,CACPC,QAAS,CACRC,KAAK,CACJd,MAAO,UACPS,KAAM,uBAEPM,WAAW,GAGZrB,KAAK,CACJsB,MAAO,GACPD,WAAW,I,mFAGQ,IAAD,OACbE,EAAUC,OAAOC,OAAO,GAAI3B,KAAKoB,MAAMlB,KAAM,CAACqB,WAAU,IAC9DvB,KAAK4B,SAAS,CACb1B,KAAKuB,IAENI,MAAM,aACJC,MAAK,SAAAC,GACL,OAAOA,EAAOC,UAEdF,MAAK,SAAAE,GACL,EAAKJ,SAAS,CACb1B,KAAK,CACJsB,MAAOQ,EACPT,WAAW,U,+BAKN,IAAD,OACJU,EAAS,kBAAC,EAAD,MACTjC,KAAKoB,MAAMlB,KAAKqB,YACnBU,EAAS,kBAAC,EAAD,CAAK/B,KAAMF,KAAKoB,MAAMlB,KAAKsB,MACnCd,QAAS,SAAAJ,GACR,IAAM4B,EAAaR,OAAOC,OAAO,GAAI,EAAKP,MAAMC,QAAS,CAAEE,WAAW,IACtE,EAAKK,SAAS,CACbP,QAASa,IAEVL,MAAMvB,EAAK,SACTwB,MAAK,SAAAC,GACL,OAAOA,EAAOC,UAEdF,MAAK,SAAAE,GACL,EAAKJ,SAAS,CACbP,QAAS,CACRC,KAAM,CACLd,MAAOwB,EAAKxB,MACZS,KAAMe,EAAKf,MAEZM,WAAW,YAQlB,IAAIY,EAAa,kBAAC,EAAD,MAQjB,OAPKnC,KAAKoB,MAAMC,QAAQE,YACvBY,EAAa,kBAAC,EAAD,CACZ3B,MAAOR,KAAKoB,MAAMC,QAAQC,KAAKd,MAC/BS,KAAMjB,KAAKoB,MAAMC,QAAQC,KAAKL,QAK/B,yBAAKmB,UAAU,OACd,mCACCH,EACAE,O,GAzEapB,aCrCEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.349b7f13.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\nclass Nav extends Component {\n\trender() {\n\t\tlet listTag = [];\n\t\tfor (const i in this.props.list) {\n\t\t\tconst li = this.props.list[i];\n\t\t\tlistTag.push(\n\t\t\t\t<li key={li.id}>\n\t\t\t\t\t<a href={'#' + li.title} data-id={li.id} onClick={e => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tthis.props.onClick(e.target.dataset.id);\n\t\t\t\t\t}}>\n\t\t\t\t\t\t{li.title}\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t)\n\t\t}\n\t\treturn (\n\t\t\t<nav>\n\t\t\t\t<ul>\n\t\t\t\t\t{listTag}\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t)\n\t}\n}\n\nclass Article extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<article>\n\t\t\t\t<h2>{this.props.title}</h2>\n\t\t\t\t<p>{this.props.desc}</p>\n\t\t\t</article>\n\t\t)\n\t}\n}\n\nclass NowLoading extends Component{\n\trender(){\n\t\treturn(\n\t\t\t<div>Now Loading.....</div>\n\t\t)\n\t}\n}\n\nclass App extends Component {\n\tstate = {\n\t\tarticle: {\n\t\t\titem:{\n\t\t\t\ttitle: 'Welcome',\n\t\t\t\tdesc: 'Hello, React & Ajax'\n\t\t\t},\n\t\t\tisLoading: false\n\t\t\t\n\t\t},\n\t\tlist:{\n\t\t\titems: [],\n\t\t\tisLoading: false\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tconst newList = Object.assign({}, this.state.list, {isLoading:true});\n\t\tthis.setState({\n\t\t\tlist:newList\n\t\t})\n\t\tfetch('list.json')\n\t\t\t.then(result => {\n\t\t\t\treturn result.json();\n\t\t\t})\n\t\t\t.then(json => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tlist:{\n\t\t\t\t\t\titems: json,\n\t\t\t\t\t\tisLoading: false\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t}\n\trender() {\n\t\tlet NavTag = <NowLoading />;\n\t\tif(!this.state.list.isLoading){\n\t\t\tNavTag = <Nav list={this.state.list.items}\n\t\t\t\tonClick={id => {\n\t\t\t\t\tconst newArticle = Object.assign({}, this.state.article, { isLoading: true });\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tarticle: newArticle\n\t\t\t\t\t})\n\t\t\t\t\tfetch(id + '.json')\n\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\treturn result.json()\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(json => {\n\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\tarticle: {\n\t\t\t\t\t\t\t\t\titem: {\n\t\t\t\t\t\t\t\t\t\ttitle: json.title,\n\t\t\t\t\t\t\t\t\t\tdesc: json.desc\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tisLoading: false\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t}}\n\t\t\t/>\n\t\t}\n\n\t\tlet ArticleTag = <NowLoading />;\n\t\tif (!this.state.article.isLoading) {\n\t\t\tArticleTag = <Article\n\t\t\t\ttitle={this.state.article.item.title}\n\t\t\t\tdesc={this.state.article.item.desc}\n\t\t\t/>\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>WEB</h1>\n\t\t\t\t{NavTag}\n\t\t\t\t{ArticleTag}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}